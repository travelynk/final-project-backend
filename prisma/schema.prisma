generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"] // Tambahkan target ini
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  buyer
}

enum Gender {
  LakiLaki  @map("Laki-laki")
  Perempuan
}

enum CountryRegion {
  Asia
  Afrika
  Australia
  AmerikaUtara   @map("Amerika Utara")
  AmerikaSelatan @map("Amerika Selatan")
  Eropa
}

enum FlightCategory {
  Internasional
  Domestik
}

enum SeatClass {
  Economy
  PremiumEconomy @map("Premium Economy")
  Business
  FirstClass     @map("First Class")
}

enum FlightType {
  Direct
  Transit
}

enum BookingStatus {
  Pending
  Confirmed
  Cancelled
}

enum PaymentMethod {
  CreditCard @map("Credit Card")
  Debit
}

enum PaymentStatus {
  Pending
  Success
  Failed
  Expired
}

enum TypeNotification {
  BookingConfirmation @map("Booking Confirmation")
  PaymentReminder     @map("Payment Reminder")
  General
}

// Define the models
model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique @db.VarChar(150)
  password      String         @db.VarChar(255)
  role          Role
  otp           String?        @db.Char(6)
  verified      Boolean        @default(false)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  Profile       Profile?
  Bookings      Booking[]
  Notifications Notification[]

  @@map("users")
}

model Profile {
  id       Int    @id @default(autoincrement())
  userId   Int    @map("user_id") @unique
  fullName String @db.VarChar(100) @map("full_name")
  phone    String @db.VarChar(16)
  gender   Gender

  User     User   @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Country {
  code   String        @id @db.Char(4)
  name   String        @db.VarChar(50)
  region CountryRegion

  Cities City[]

  @@map("countries")
}

model City {
  code        String    @id @db.Char(4)
  name        String    @db.VarChar(50)
  countryCode String    @map("country_code")

  Country     Country   @relation(fields: [countryCode], references: [code])
  Airports    Airport[]

  @@map("cities")
}

model Airport {
  id        Int        @id @default(autoincrement())
  code      String     @unique @db.Char(4)
  name      String     @db.VarChar(100)
  cityCode  String     @map("city_code")

  City      City       @relation(fields: [cityCode], references: [code])
  Terminals Terminal[]
  Airlines  Airline[]
  DepartureRoutes    Route[] @relation("DepartureAirportRoutes")
  ArrivalRoutes      Route[] @relation("ArrivalAirportRoutes")

  @@map("airports")
}

model Terminal {
  id        Int            @id @default(autoincrement())
  name      String         @db.VarChar(100)
  airportId Int            @map("airport_id")
  category  FlightCategory
  
  Airport   Airport        @relation(fields: [airportId], references: [id])

  @@map("terminals")
}

model Airline {
  id             Int              @id
  code           String           @unique @db.Char(4)
  name           String           @db.VarChar(50)
  airportId      Int              @map("airport_id")

  Airport        Airport          @relation(fields: [airportId], references: [id])
  Routes         Route[]
  AirlinesPlanes AirlinesPlanes[]

  @@map("airlines")
}

model Plane {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(50)
  status         Boolean          @default(true)

  AirlinesPlanes AirlinesPlanes[]

  @@map("planes")
}

model AirlinesPlanes {
  airlineId Int
  planeId   Int

  Airline   Airline @relation(fields: [airlineId], references: [id])
  Plane     Plane   @relation(fields: [planeId], references: [id])

  @@id([airlineId, planeId])
  @@map("airlines_planes")
}

model Route {
  id                 Int       @id @default(autoincrement())
  airlineId          Int       @map("airline_id")
  departureAirportId Int       @map("departure_airport_id")
  arrivalAirportId   Int       @map("arrival_airport_id")
  estimatedDuration  Int       @map("estimated_duration")

  Airline            Airline   @relation(fields: [airlineId], references: [id])
  DepartureAirport   Airport   @relation("DepartureAirportRoutes", fields: [departureAirportId], references: [id])
  ArrivalAirport     Airport   @relation("ArrivalAirportRoutes", fields: [arrivalAirportId], references: [id])
  Flights            Flight[]
  Transits           Transit[]

  @@map("routes")
}

model Flight {
  id            Int          @id @default(autoincrement())
  routeId       Int          @map("route_id")
  departureTime DateTime     @map("departure_time")
  arrivalTime   DateTime     @map("arrival_time")
  type          FlightType   @default(Direct)
  seatClass     SeatClass    @map("seat_class")
  seatCapacity  Int          @map("seat_capacity")
  facility      String?
  price         Float        @default(0)
  disc          Float        @default(0)

  Route           Route         @relation(fields: [routeId], references: [id])
  FlightSeats     FlightSeat[]
  OutboundBooking Booking[]     @relation("OutboundFlightBooking")
  ReturnBooking   Booking[]     @relation("ReturnFlightBooking")
  Transits        Transit[]

  @@map("flights")
  
}

model FlightSeat {
  id          Int     @id @default(autoincrement())
  flightId    Int?    @map("flight_id")
  position    String  @db.Char(4)
  isAvailable Boolean @default(true)  @map("is_available")

  Flight      Flight? @relation(fields: [flightId], references: [id])
  Passengers  Passenger[]

  @@map("flight_seats")
}

model Transit {
  id            Int       @id @default(autoincrement())
  flightId      Int       @map("flight_id")
  routeId       Int       @map("route_id")
  departureTime DateTime  @map("departure_time")
  arrivalTime   DateTime  @map("arrival_time")
  
  Flight        Flight   @relation(fields: [flightId], references: [id])
  Route         Route    @relation(fields: [routeId], references: [id])

  @@map("transits")
}

model Booking {
  id               Int             @id @default(autoincrement())
  userId           Int             @map("user_id")
  outboundFlightId Int             @map("outbound_flight_id")
  returnFlightId   Int?            @map("return_flight_id")
  roundTrip        Boolean         @default(false) @map("round_trip")
  totalPrice       Float           @default(0) @map("total_price")
  tax              Float           @default(0)
  status           BookingStatus   @default(Pending)
  createdAt        DateTime        @default(now())  @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  User             User            @relation(fields: [userId], references: [id])
  OutboundFlight   Flight          @relation("OutboundFlightBooking", fields: [outboundFlightId], references: [id])
  ReturnFlight     Flight?         @relation("ReturnFlightBooking", fields: [returnFlightId], references: [id])
  PassengerCount   PassengerCount?
  Passengers       Passenger[]
  Payments         Payment[]

  @@map("bookings")
}

model PassengerCount {
  id        Int     @id @default(autoincrement())
  bookingId Int     @map("booking_id") @unique
  adult     Int
  child     Int
  baby      Int

  Booking   Booking @relation(fields: [bookingId], references: [id])

  @@map("passenger_counts")
}

model Passenger {
  id             Int        @id @default(autoincrement())
  bookingId      Int        @map("booking_id")
  title          String     @db.Char(7)
  fullName       String     @db.VarChar(100) @map("full_name")
  familyName     String?    @db.VarChar(50)  @map("family_name")
  dob            DateTime
  nationality    String     @db.VarChar(50)
  identityNumber String     @db.VarChar(20) @map("identity_number")
  issuingCountry String     @db.VarChar(50) @map("issuing_country")
  identityExp    DateTime   @map("identity_exp")
  seatId         Int        @map("seat_id")

  Booking        Booking    @relation(fields: [bookingId], references: [id])
  FlightSeat     FlightSeat @relation(fields: [seatId], references: [id])

  @@map("passengers")
}

model Payment {
  id        Int           @id @default(autoincrement())
  bookingId Int           @map("booking_id")
  total     Float
  method    PaymentMethod
  status    PaymentStatus @default(Pending)
  amount    Float         @default(0)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt      @map("updated_at")

  Booking   Booking       @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int              @map("user_id")
  type      TypeNotification @default(General)
  message   String
  isRead    Boolean          @default(false)  @map("is_read")
  createdAt DateTime         @default(now())  @map("created_at")
  updatedAt DateTime         @updatedAt       @map("updated_at")

  User      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}
