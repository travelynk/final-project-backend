generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"] // Tambahkan target ini
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  buyer
}

enum FlightCategory {
  Internasional
  Domestik
}

enum FlightType {
  Direct
  Transit
}

enum BookingStatus {
  Pending
  Confirmed
  Cancelled
}

enum PaymentStatus {
  Pending
  Success
  Failed
  Expired
}

// Define the models
model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique @db.VarChar(150)
  password      String         @db.VarChar(255)
  role          Role
  otp           String?        @db.Char(6)
  verified      Boolean        @default(false)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  profile       Profile?
  bookings      Booking[]
  notifications Notification[]

  @@map("users")
}

model Profile {
  id       Int    @id @default(autoincrement())
  userId   Int    @map("user_id") @unique
  fullName String @db.VarChar(100) @map("full_name")
  phone    String @db.VarChar(16)
  gender   String @db.VarChar(10)

  user     User   @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Country {
  code   String        @id @db.VarChar(4)
  name   String        @db.VarChar(50)
  region String        @db.VarChar(20)

  cities City[]

  @@map("countries")
}

model City {
  code        String    @id @db.VarChar(4)
  name        String    @db.VarChar(50)
  countryCode String    @map("country_code")

  country     Country   @relation(fields: [countryCode], references: [code])
  airports    Airport[]

  @@map("cities")
}

model Airport {
  id        Int        @id @default(autoincrement())
  code      String     @unique @db.VarChar(4)
  name      String     @db.VarChar(100)
  cityCode  String     @map("city_code")

  city              City       @relation(fields: [cityCode], references: [code])
  terminals         Terminal[]
  airlines          Airline[]
  departureRoutes   Route[] @relation("DepartureAirportRoutes")
  arrivalRoutes     Route[] @relation("ArrivalAirportRoutes")

  @@map("airports")
}

model Terminal {
  id        Int            @id @default(autoincrement())
  name      String         @db.VarChar(100)
  airportId Int            @map("airport_id")
  category  FlightCategory
  
  airport   Airport        @relation(fields: [airportId], references: [id])

  @@map("terminals")
}

model Airline {
  id             Int              @id @default(autoincrement())
  code           String           @unique @db.VarChar(4)
  name           String           @db.VarChar(50)
  seatCapacity   Int              @map("seat_capacity")
  facility       String?
  airportId      Int              @map("airport_id")

  airport        Airport          @relation(fields: [airportId], references: [id])
  routes         Route[]
  // AirlinesPlanes AirlinesPlanes[]

  @@map("airlines")
}

// model Plane {
//   id             Int              @id @default(autoincrement())
//   name           String           @db.VarChar(50)
//   status         Boolean          @default(true)

//   AirlinesPlanes AirlinesPlanes[]

//   @@map("planes")
// }

// model AirlinesPlanes {
//   airlineId Int
//   planeId   Int

//   Airline   Airline @relation(fields: [airlineId], references: [id])
//   Plane     Plane   @relation(fields: [planeId], references: [id])

//   @@id([airlineId, planeId])
//   @@map("airlines_planes")
// }

model Route {
  id                 Int       @id @default(autoincrement())
  airlineId          Int       @map("airline_id")
  departureAirportId Int       @map("departure_airport_id")
  arrivalAirportId   Int       @map("arrival_airport_id")
  departureTime      DateTime  @map("departure_time")
  arrivalTime        DateTime  @map("arrival_time")
  estimatedDuration  Int       @map("estimated_duration")

  airline            Airline   @relation(fields: [airlineId], references: [id])
  departureAirport   Airport   @relation("DepartureAirportRoutes", fields: [departureAirportId], references: [id])
  arrivalAirport     Airport   @relation("ArrivalAirportRoutes", fields: [arrivalAirportId], references: [id])
  flights            Flight[]
  transits           Transit[]

  @@map("routes")
}

model Flight {
  id            Int          @id @default(autoincrement())
  routeId       Int          @map("route_id")
  type          FlightType   @default(Direct)
  seatClass     String       @db.VarChar(25) @map("seat_class")
  price         Float        @default(0)

  route             Route         @relation(fields: [routeId], references: [id])
  flightSeats       FlightSeat[]
  outboundBookings  Booking[]     @relation("OutboundFlightBooking")
  returnBookings    Booking[]     @relation("ReturnFlightBooking")
  transits          Transit[]

  @@map("flights")
  
}

model FlightSeat {
  id          Int     @id @default(autoincrement())
  flightId    Int?    @map("flight_id")
  position    String  @db.VarChar(4)
  isAvailable Boolean @default(true)  @map("is_available")

  flight      Flight? @relation(fields: [flightId], references: [id])
  passengers  Passenger[]

  @@map("flight_seats")
}

model Transit {
  id            Int       @id @default(autoincrement())
  flightId      Int       @map("flight_id")
  routeId       Int       @map("route_id")
  
  flight        Flight   @relation(fields: [flightId], references: [id])
  route         Route    @relation(fields: [routeId], references: [id])

  @@map("transits")
}

model Booking {
  id               Int             @id @default(autoincrement())
  userId           Int             @map("user_id")
  outboundFlightId Int             @map("outbound_flight_id")
  returnFlightId   Int?            @map("return_flight_id")
  roundTrip        Boolean         @default(false) @map("round_trip")
  totalPrice       Float           @default(0) @map("total_price")
  tax              Float           @default(0)
  disc             Float           @default(0)
  status           BookingStatus   @default(Pending)
  createdAt        DateTime        @default(now())  @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  user             User            @relation(fields: [userId], references: [id])
  outboundFlight   Flight          @relation("OutboundFlightBooking", fields: [outboundFlightId], references: [id])
  returnFlight     Flight?         @relation("ReturnFlightBooking", fields: [returnFlightId], references: [id])
  passengerCount   PassengerCount?
  passengers       Passenger[]
  payments         Payment[]

  @@map("bookings")
}

model PassengerCount {
  id        Int     @id @default(autoincrement())
  bookingId Int     @map("booking_id") @unique
  adult     Int
  child     Int
  baby      Int

  booking   Booking @relation(fields: [bookingId], references: [id])

  @@map("passenger_counts")
}

model Passenger {
  id             Int        @id @default(autoincrement())
  bookingId      Int        @map("booking_id")
  title          String     @db.VarChar(7)
  fullName       String     @db.VarChar(100) @map("full_name")
  familyName     String?    @db.VarChar(50)  @map("family_name")
  dob            DateTime
  nationality    String     @db.VarChar(50)
  identityNumber String     @db.VarChar(20) @map("identity_number")
  issuingCountry String     @db.VarChar(50) @map("issuing_country")
  identityExp    DateTime   @map("identity_exp")
  seatId         Int        @map("seat_id")

  booking        Booking    @relation(fields: [bookingId], references: [id])
  flightSeat     FlightSeat @relation(fields: [seatId], references: [id])

  @@map("passengers")
}

model Payment {
  id        Int           @id @default(autoincrement())
  bookingId Int           @map("booking_id")
  total     Float
  method    String        @db.VarChar(20)
  status    PaymentStatus @default(Pending)
  amount    Float         @default(0)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt      @map("updated_at")

  booking   Booking       @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int              @map("user_id")
  type      String           @db.VarChar(25) @default("General")
  message   String
  isRead    Boolean          @default(false)  @map("is_read")
  createdAt DateTime         @default(now())  @map("created_at")
  updatedAt DateTime         @updatedAt       @map("updated_at")

  user      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}
