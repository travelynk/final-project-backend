generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"] // Tambahkan target ini
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  buyer
}

enum FlightCategory {
  Internasional
  Domestik
}

enum BookingStatus {
  Pending
  Confirmed
  Cancelled
}

enum PaymentStatus {
  Pending
  Success
  Failed
  Expired
}

// Define the models
model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique @db.VarChar(150)
  password      String         @db.VarChar(255)
  role          Role
  otpSecret     String?        @db.Char(255) @map("otp_secret")
  verified      Boolean        @default(false)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  profile       Profile?
  bookings      Booking[]
  passengers    Passenger[]
  notifications Notification[]

  @@map("users")
}

model Profile {
  id       Int    @id @default(autoincrement())
  userId   Int    @map("user_id") @unique
  fullName String @db.VarChar(100) @map("full_name")
  phone    String @db.VarChar(16)
  gender   String? @db.VarChar(10) // Laki-laki, Perempuan

  user     User   @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Country {
  code   String        @id @db.VarChar(4)
  name   String        @db.VarChar(50)
  region String        @db.VarChar(20)

  cities City[]

  @@map("countries")
}

model City {
  code        String    @id @db.VarChar(4)
  name        String    @db.VarChar(50)
  countryCode String    @map("country_code")

  country     Country   @relation(fields: [countryCode], references: [code])
  airports    Airport[]

  @@map("cities")
}

model Airport {
  id        Int        @id @default(autoincrement())
  code      String     @unique @db.VarChar(4)
  name      String     @db.VarChar(100)
  cityCode  String     @map("city_code")

  city              City        @relation(fields: [cityCode], references: [code])
  terminals         Terminal[]
  airlines          Airline[]
  departureRoutes   Flight[]    @relation("DepartureAirportRoutes")
  arrivalRoutes     Flight[]    @relation("ArrivalAirportRoutes")

  @@map("airports")
}

model Terminal {
  id        Int            @id @default(autoincrement())
  name      String         @db.VarChar(100)
  airportId Int            @map("airport_id")
  category  FlightCategory
  
  airport   Airport        @relation(fields: [airportId], references: [id])

  @@map("terminals")
}

model Airline {
  id             Int              @id @default(autoincrement())
  code           String           @unique @db.VarChar(4)
  name           String           @db.VarChar(50)
  airportId      Int              @map("airport_id")

  airport        Airport          @relation(fields: [airportId], references: [id])
  flight         Flight[]

  @@map("airlines")
}

model Flight {
  id                 Int           @id @default(autoincrement())
  airlineId          Int           @map("airline_id")
  flightNum          String        @map("flight_num") @db.VarChar(15)
  departureAirportId Int           @map("departure_airport_id")
  arrivalAirportId   Int           @map("arrival_airport_id")
  departureTime      DateTime      @map("departure_time")
  arrivalTime        DateTime      @map("arrival_time")
  estimatedDuration  Int           @map("estimated_duration")
  seatClass          String        @map("seat_class")
  seatCapacity       Int           @map("seat_capacity")
  facility           String?
  price              Float         @default(0)

  airline            Airline       @relation(fields: [airlineId], references: [id])
  departureAirport   Airport       @relation("DepartureAirportRoutes", fields: [departureAirportId], references: [id])
  arrivalAirport     Airport       @relation("ArrivalAirportRoutes", fields: [arrivalAirportId], references: [id])

  flightSeats        FlightSeats[]
  bookingSegments    BookingSegments[]
  passengerSeats     PassengerSeats[]

  @@map("flights")
}

model FlightSeats {
  id          Int     @id @default(autoincrement())
  flightId    Int?    @map("flight_id")
  position    String  @db.VarChar(4)
  isAvailable Boolean @default(true) @map("is_available")

  flight          Flight? @relation(fields: [flightId], references: [id])
  passengerSeats  PassengerSeats[]

  @@map("flight_seats")
}

model Booking {
  id               Int             @id @default(autoincrement())
  userId           Int             @map("user_id")
  roundTrip        Boolean         @default(false) @map("round_trip")
  totalPrice       Float           @default(0) @map("total_price")
  tax              Float           @default(0)
  disc             Float           @default(0)
  status           BookingStatus   @default(Pending)
  createdAt        DateTime        @default(now())  @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  user             User            @relation(fields: [userId], references: [id])
  passengerCount   PassengerCount?
  passengers       Passenger[]
  payments         Payment[]
  segments         BookingSegments[]

  @@map("bookings")
}

model BookingSegments {
  id        Int      @id @default(autoincrement())
  bookingId Int      @map("booking_id")
  flightId  Int      @map("flight_id")
  isReturn  Boolean  @default(false) @map("is_return")

  booking   Booking @relation(fields: [bookingId], references: [id])
  flight    Flight  @relation(fields: [flightId], references: [id])

  @@map("booking_segments")
}

model PassengerCount {
  id          Int     @id @default(autoincrement())
  bookingId   Int     @map("booking_id") @unique
  adult       Int
  child       Int
  infant      Int

  booking   Booking @relation(fields: [bookingId], references: [id])

  @@map("passenger_counts")
}

model Passenger {
  id             Int        @id @default(autoincrement())
  bookingId      Int        @map("booking_id")
  userId         Int        @map("user_id")
  title          String     @db.VarChar(7)
  fullName       String     @db.VarChar(100) @map("full_name")
  familyName     String?    @db.VarChar(50)  @map("family_name")
  dob            DateTime
  nationality    String     @db.VarChar(50)
  identityNumber String     @db.VarChar(20) @map("identity_number")
  issuingCountry String     @db.VarChar(50) @map("issuing_country")
  identityExp    DateTime   @map("identity_exp")

  booking        Booking    @relation(fields: [bookingId], references: [id])
  user           User       @relation(fields: [userId], references: [id])
  seats          PassengerSeats[]

  @@map("passengers")
}

model PassengerSeats {
  id          Int     @id @default(autoincrement())
  passengerId Int     @map("passenger_id")
  flightId    Int     @map("flight_id")
  seatId      Int     @map("seat_id")

  passenger   Passenger   @relation(fields: [passengerId], references: [id])
  flight      Flight      @relation(fields: [flightId], references: [id])
  seat        FlightSeats  @relation(fields: [seatId], references: [id])

  @@map("passenger_seats")
}

model Payment {
  id               Int           @id @default(autoincrement())
  bookingId        Int           @map("booking_id")
  transactionId    String        @unique @db.VarChar(100) @map("transaction_id")
  reference_number String        @db.VarChar(100) @map("reference_number")
  total            Float
  method           String        @db.VarChar(20)
  status           PaymentStatus @default(Pending)
  amount           Float         @default(0)
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt      @map("updated_at")

  booking          Booking       @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int              @map("user_id")
  type      String           @default("General")
  message   String
  isRead    Boolean          @default(false)  @map("is_read")
  createdAt DateTime         @default(now())  @map("created_at")
  updatedAt DateTime         @updatedAt       @map("updated_at")

  user      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}
